{"version":3,"sources":["first/app.cljs"],"mappings":"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","names":["G__13782","props__11616__auto__","maybe-ref__11617__auto__","vec__13783","helix.core/extract-cljs-props","map__13786","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__13787","first.app/greeting","name","G__13789","vec__13790","G__13795","first.app/clickMe","js/alert","seq__13796","cljs.core/seq","chunk__13798","count__13799","i__13800","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","val","cljs.core/odd?","cljs.core.prn","G__13804","vec__13805","G__13818","first.app/first-app","vec__13808","state","set-state","helix.hooks/use-state","G__13815","G__13816","G__13817","cljs.core/assoc","p1__13802#","js/first","js/first.app","js/first.app.root","first.app/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","helix.core/get-react","obj13812","obj13794","obj13814","helix.impl.props/or-undefined"],"sourcesContent":["(ns first.app\n  (:require [helix.core :refer [defnc $]]\n            [helix.hooks :as hooks]\n            [helix.dom :as d]\n            [\"react-dom/client\" :as rdom]))\n\n;; define components using the `defnc` macro\n(defnc greeting\n  \"A component which greets a user.\"\n  [{:keys [name]}]\n  ;; use helix.dom to create DOM elements\n  (d/div \"Hello, \" (d/strong name) \"!\"))\n\n(defnc clickMe []\n  (d/button { :on-click #(js/alert \"BOOO!!\")} \"Click Me!\" )\n  )\n\n(doseq [val [ 2 3 4 5 6 7 8 9]\n        :when(odd? val)\n        ]\n       \n  \n  ( prn val)\n  )\n\n(defnc first-app []\n  (let [[state set-state] (hooks/use-state {:name \"Helix User\"})]\n    (d/div\n     (d/h1 \"Welcome!\")\n     ($ clickMe )\n      ;; create elements out of components\n      ($ greeting {:name (:name state)})\n      (d/input {:value (:name state)\n                :on-change #(set-state assoc :name (.. % -target -value))}))) \n  )\n\n\n\n\n;; const clickMe () => {<button onClick = {js/alert (\"Boo!!!\")} > Click me </button>}\n\n;; start your app with your favorite React renderer\n(defonce root (rdom/createRoot (js/document.getElementById \"app\")))\n(.render root ($ first-app))"]}