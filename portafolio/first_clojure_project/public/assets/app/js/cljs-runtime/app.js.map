{"version":3,"sources":["app.cljs"],"mappings":";;AAOA,AAAA;AAAA;;;eAAA,iBAAAA,WAAA,8BAAAC,qBAAAC,9FAAOS;AAAP,AAAA,IAAAR,aAAA,mFAAA,AAAAC,8BAAAH,sBAAAC;IAAAG,aAAA,AAAAC,4CAAAH,WAAA,IAAA;IAAAE,iBAAA,AAAAE,4BAAAF;WAAA,AAAAG,4CAAAH,eAAA,lEAEWO;AAFX,AAAA;oHAI6BA,pHA6JxB,OAAA,AAAAmB,qCAAA,MAAA,KAAA,UAAA,AAAA,AAAAA,qCAAA,SAAA,WAAA;;AAjKL,AAAA,GAAA,AAAAtB;AAAA,IAAAC,WAAAV;AAAA,AAAA,CAAA,AAAAU,uBAAA;;AAAAA;;AAAAV;;;;AAAA;AAAA;AAAOW,AAMP,AAAA;AAAA,gBAAA,iBAAAE,WAAA,+BAAAZ,qBAAAC,hGAAOc;AAAP,AAAA,IAAAF,aAAA,mFAAA,AAAAV,8BAAAH,sBAAAC;AAAA,AAAA;AACE,IAAAe,aAAwB,sBAAA,2CAAA,qDAAA,tHAACG;YAAzB,AAAAd,4CAAAW,WAAA,IAAA,nEAAOC;gBAAP,AAAAZ,4CAAAW,WAAA,IAAA,vEAAaE;AAAb,uJAIOR,kDAAgB,AAAA,mFAAOO,1KA+BzB,AAAA,AAAAa,kDAAA,iBAAAC,WAAA,EAAA,lMAuHF,OAAA,AAAAD,qCAAA,MAAA,KAAA,AAAA,AAAAA,qCAAA,KAAA,KAAA;AAvHE,AAAAC;uHA9BgB,AAAA,mFAAOd,pMAgJzB,AAAA,AAAAa,qCAAA,QAAA,iBAAAE,WAAA,EAAA,QAAA,AAAAC,yHAAA,WAAA,WAAAT;AA/IuB,IAAAJ,WAAWG,fA+IlC;IA/IuBF,WAAA;IAAAC,WAAuB,AAAA,AAAAE;AAAvB,AAAA,0FAAAJ,SAAAC,SAAAC,gCAAAF,SAAAC,SAAAC,tJAACJ,0CAAAA,sEAAAA;;AA+IxB,AAAAc;;;AAtJL,AAAA,GAAA,AAAAxB;AAAA,IAAAM,WAAAF;AAAA,AAAA,CAAA,AAAAE,uBAAA;;AAAAA;;AAAAF;;;;AAAA;AAAA;AAAOG,AAUP,GAAA,QAAAU,gCAAAC;AAAA;AAAA,AAAA,AAASC,WAAK,AAACC,gDAAgB,wBAAA,xBAACC;;AAChC,AAASF,qDAAQZ,rCAiCJ,AAAA,AAAAe,mDAAA","names":["G__12680","props__11802__auto__","maybe-ref__11803__auto__","vec__12681","helix.core/extract-cljs-props","map__12684","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","goog/DEBUG","G__12685","app/greeting","name","G__12688","vec__12689","G__12702","app/first-app","vec__12692","state","set-state","helix.hooks/use-state","G__12699","G__12700","G__12701","cljs.core/assoc","p1__12686#","js/app","js/app.root","app/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","helix.core/get-react","obj12696","obj12698","helix.impl.props/or-undefined"],"sourcesContent":["(ns app\n  (:require [helix.core :refer [defnc $]]\n            [helix.hooks :as hooks]\n            [helix.dom :as d]\n            [\"react-dom/client\" :as rdom]))\n\n;; define components using the `defnc` macro\n(defnc greeting\n  \"A component which greets a user.\"\n  [{:keys [name]}]\n  ;; use helix.dom to create DOM elements\n  (d/div \"Hello, \" (d/strong name) \"!\"))\n\n(defnc first-app []\n  (let [[state set-state] (hooks/use-state {:name \"Helix User\"})]\n    (d/div\n     (d/h1 \"Welcome!\")\n      ;; create elements out of components\n      ($ greeting {:name (:name state)})\n      (d/input {:value (:name state)\n                :on-change #(set-state assoc :name (.. % -target -value))}))))\n\n;; start your app with your favorite React renderer\n(defonce root (rdom/createRoot (js/document.getElementById \"app\")))\n(.render root ($ first-app))"]}